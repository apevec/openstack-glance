From 5a820c7b2ba8576512a69e1f6537ad7de9b1a9fb Mon Sep 17 00:00:00 2001
From: Brian Waldon <brian.waldon@rackspace.com>
Date: Mon, 26 Sep 2011 17:37:45 -0400
Subject: [PATCH] Make remote swift image streaming functional

Fixes lp 850425

(cherry picked from commit 4847ceb59fe35481fd42ddc9369b7d3814eca721)

Change-Id: I117d45f7d5b1991296736b7915857e8764aad30d
---
 glance/store/swift.py                 |    2 +-
 glance/tests/functional/test_swift.py |   83 +++++++++++++++++++++++++++++++++
 glance/tests/unit/test_swift_store.py |    4 +-
 3 files changed, 86 insertions(+), 3 deletions(-)

diff --git a/glance/store/swift.py b/glance/store/swift.py
index 9c93ced..e99d7be 100644
--- a/glance/store/swift.py
+++ b/glance/store/swift.py
@@ -260,7 +260,7 @@ class Store(glance.store.base.Store):
         #            "Expected %s byte file, Swift has %s bytes" %
         #            (expected_size, obj_size))
 
-        return (resp_body, None)
+        return (resp_body, resp_headers.get('content-length'))
 
     def _make_swift_connection(self, auth_url, user, key):
         """
diff --git a/glance/tests/functional/test_swift.py b/glance/tests/functional/test_swift.py
index fc0f9aa..dbbc6f7 100644
--- a/glance/tests/functional/test_swift.py
+++ b/glance/tests/functional/test_swift.py
@@ -385,3 +385,86 @@ class TestSwift(test_api.TestApi):
                          hashlib.md5("*" * FIVE_MB).hexdigest())
 
         self.stop_servers()
+
+    @skip_if_disabled
+    def test_remote_image(self):
+        """
+        Ensure we can retrieve an image that was not stored by glance itself
+        """
+        self.cleanup()
+
+        self.start_servers(**self.__dict__.copy())
+
+        api_port = self.api_port
+        registry_port = self.registry_port
+
+        # POST /images with public image named Image1
+        image_data = "*" * FIVE_MB
+        headers = {'Content-Type': 'application/octet-stream',
+                   'X-Image-Meta-Name': 'Image1',
+                   'X-Image-Meta-Is-Public': 'True'}
+        path = "http://%s:%d/v1/images" % ("0.0.0.0", self.api_port)
+        http = httplib2.Http()
+        response, content = http.request(path, 'POST', headers=headers,
+                                         body=image_data)
+        self.assertEqual(response.status, 201, content)
+        data = json.loads(content)
+        self.assertEqual(data['image']['checksum'],
+                         hashlib.md5(image_data).hexdigest())
+        self.assertEqual(data['image']['size'], FIVE_MB)
+        self.assertEqual(data['image']['name'], "Image1")
+        self.assertEqual(data['image']['is_public'], True)
+
+        # GET /images/1 and make sure data was uploaded
+        path = "http://%s:%d/v1/images/1" % ("0.0.0.0", self.api_port)
+        http = httplib2.Http()
+        response, content = http.request(path, 'GET')
+        self.assertEqual(response.status, 200)
+        self.assertEqual(response['content-length'], str(FIVE_MB))
+
+        self.assertEqual(content, "*" * FIVE_MB)
+        self.assertEqual(hashlib.md5(content).hexdigest(),
+                         hashlib.md5("*" * FIVE_MB).hexdigest())
+
+        # use this header as the location for the next image
+        swift_location = response['x-image-meta-location']
+
+        # POST /images with public image named Image1 without uploading data
+        image_data = "*" * FIVE_MB
+        headers = {'Content-Type': 'application/octet-stream',
+                   'X-Image-Meta-Name': 'Image1',
+                   'X-Image-Meta-Is-Public': 'True',
+                   'X-Image-Meta-Location': swift_location}
+        path = "http://%s:%d/v1/images" % ("0.0.0.0", self.api_port)
+        http = httplib2.Http()
+        response, content = http.request(path, 'POST', headers=headers)
+        self.assertEqual(response.status, 201, content)
+        data = json.loads(content)
+        self.assertEqual(data['image']['checksum'], None)
+        self.assertEqual(data['image']['size'], 0)
+        self.assertEqual(data['image']['name'], "Image1")
+        self.assertEqual(data['image']['is_public'], True)
+
+        # GET /images/2 ensuring the data already in swift is accessible
+        path = "http://%s:%d/v1/images/2" % ("0.0.0.0", self.api_port)
+        http = httplib2.Http()
+        response, content = http.request(path, 'GET')
+        self.assertEqual(response.status, 200)
+        self.assertEqual(response['content-length'], str(FIVE_MB))
+
+        self.assertEqual(content, "*" * FIVE_MB)
+        self.assertEqual(hashlib.md5(content).hexdigest(),
+                         hashlib.md5("*" * FIVE_MB).hexdigest())
+
+        # DELETE /images/1 and /image/2
+        # Verify image and all chunks are gone...
+        path = "http://%s:%d/v1/images/1" % ("0.0.0.0", self.api_port)
+        http = httplib2.Http()
+        response, content = http.request(path, 'DELETE')
+        self.assertEqual(response.status, 200)
+        path = "http://%s:%d/v1/images/2" % ("0.0.0.0", self.api_port)
+        http = httplib2.Http()
+        response, content = http.request(path, 'DELETE')
+        self.assertEqual(response.status, 200)
+
+        self.stop_servers()
diff --git a/glance/tests/unit/test_swift_store.py b/glance/tests/unit/test_swift_store.py
index 036d526..36a3096 100644
--- a/glance/tests/unit/test_swift_store.py
+++ b/glance/tests/unit/test_swift_store.py
@@ -198,7 +198,7 @@ class TestStore(unittest.TestCase):
         """Test a "normal" retrieval of an image in chunks"""
         loc = get_location_from_uri("swift://user:key@auth_address/glance/2")
         (image_swift, image_size) = self.store.get(loc)
-        self.assertEqual(image_size, None)
+        self.assertEqual(image_size, 5120)
 
         expected_data = "*" * FIVE_KB
         data = ""
@@ -216,7 +216,7 @@ class TestStore(unittest.TestCase):
         loc = get_location_from_uri("swift+http://user:key@auth_address/"
                                     "glance/2")
         (image_swift, image_size) = self.store.get(loc)
-        self.assertEqual(image_size, None)
+        self.assertEqual(image_size, 5120)
 
         expected_data = "*" * FIVE_KB
         data = ""
-- 
1.7.6.5

